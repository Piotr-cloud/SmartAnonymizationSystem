'''
Created on 25 lis 2020

@author: piotr
'''

import dlib
import cv2
import numpy as np

from Detections.Detection import BoundingBox_Cls
from Detections.DetectionsMap import DetectionsMap_Cls

from ObjectsDetectable.Classes import FaceID

from Detector.FacesDetectors.FacesDetector import FacesDetector_AbstCls
from Configuration.ConfigurationObjects.WorkerConfigurationArgument import UserCfg_Int_Limited
from SW_Licensing.SW_License import License_Cls



class Dlib_HOG_Cls(FacesDetector_AbstCls):
    
    @staticmethod
    def getName(): 
        return "DlibHOG"
        
    @staticmethod
    def getDescription():
        return "Dlib histogram of oriented gradients detector using grayscale image for frontal face detector: dlib.get_frontal_face_detector(). Dlib repo: https://github.com/davisking/dlib"

    
    def __init__(self, 
                upsample = UserCfg_Int_Limited(
                    name = "Upsample factor",
                    description = "Upsample of image before detecting",
                    lower_limit = 1,
                    defaultValue = 1,
                    upper_limit = 320),
                ):
        
        FacesDetector_AbstCls.__init__(self)
        
        self.upsample = self.resolveArgument(upsample)
        self.detector = dlib.get_frontal_face_detector()
    
    
    def _detect(self, nparray):
        
        detections = DetectionsMap_Cls()
        
        gray = cv2.cvtColor(nparray, cv2.COLOR_BGR2GRAY)
        
        for result in self.detector(gray, self.upsample):
            
            left     = result.left()    / nparray.shape[1]
            top      = result.top()     / nparray.shape[0]
            right    = result.right()   / nparray.shape[1]
            bottom   = result.bottom()  / nparray.shape[0]
            
            left, top, right, bottom = np.clip((left, top, right, bottom), 0.0, 1.0)
            
            detections.addDetection(BoundingBox_Cls(class_ = FaceID,
                                                    left = left,
                                                    top = top,
                                                    right = right,
                                                    bottom = bottom)
                                    )
        
        return detections
    
            
    @staticmethod
    def getLicense():
        return License_Cls(
            type_ = "Boost Software License",
            srcCodeLocation = "https://github.com/davisking/dlib",
            fullStatement = """
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
""")
        

